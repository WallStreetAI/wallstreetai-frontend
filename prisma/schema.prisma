// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  resumes       Resume[]
  resumeFiles   ResumeFile[]
  role          UserRole          @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resume {
  id String @id @default(cuid())
  resumeFileId String?
  userId String 
  personalInfo   Json?
  workExperience Json?
  education Json?
  qualification Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  skills String[]
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResumeFile {
  id String @id @default(cuid())
  userId String
  resumeId String? @unique
  file String
  fileName String
  fileType String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model PersonalInfo {
//   id String @id @default(cuid())
//   resumeId String @unique
//   firstName String?
//   lastName String?
//   email String?
//   phoneNumber String?
//   addressLine1 String?
//   addressLine2 String?
//   city String?
//   postalCode String?
//   country String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model WorkExperience {
//   id String @id @default(cuid())
//   resumeId String
//   jobTitle String?
//   company String?
//   location String?
//   startDate DateTime?
//   endDate DateTime?
//   currentlyWorkingHere String? @default("False")
//   description String?
//   enhancedDescription String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//  }
 
// model Education {
//   id String @id @default(cuid())
//   resumeId String
//   institution String?
//   degree String?
//   fieldOfStudy String?
//   startDate DateTime?
//   endDate DateTime?
//   description String?
//   enhancedDescription String?
//   currentlyStudyingHere String? @default("False")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }


// model Qualification {
//   id String @id @default(cuid())
//   resumeId String
//   qualification String?
//   awardedDate String?
//   institution DateTime?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//  }

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
model VerificationToken {
  id String @id @default(cuid())
  email String
  token      String @unique
  expires DateTime
 
  @@unique([token, email])
}

// better to separate the password reset token from the verification token
model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token      String @unique
  expires DateTime
 
  @@unique([token, email])
}


